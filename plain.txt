1️⃣ Middleware 系統化
	•	放在 internal/framework/http/gin/middleware/
	•	包含：
	•	Request logging middleware（請求進出日誌）
	•	Recovery middleware（全域 panic 捕獲）
	•	Authentication middleware（例如 JWT 驗證）
	•	CORS middleware（跨域處理）

目標：

用全域 middleware 統一處理請求前後的共用邏輯，而不是散落在 controller。

—

2️⃣ Logger 系統
	•	放在 internal/framework/logger/ 或 pkg/logger/
	•	封裝一個統一 logger（例如基於 zap、logrus、zerolog）
	•	用 DI 注入各層（至少 usecase、driver 層），
讓每層都用統一 logger 而不是亂印 fmt.Println。

目標：

確保 log 格式、log level、log 結構一致，且可未來接入 ELK、Datadog、Stackdriver 等。

—

3️⃣ Config 管理
	•	放在 internal/framework/config/
	•	用一個 struct 加載多種來源（例如：
	•	local config.yaml
	•	環境變數
	•	預設值 fallback）
	•	用 DI 注入各層需要的 config，而不是到處 hardcode。

目標：

確保設定集中管理，未來方便切換環境（dev/stage/prod）。

—

4️⃣ （進階）監控與 Metrics（Prometheus）
	•	放在 internal/framework/monitoring/
	•	暴露 Prometheus metrics endpoint
	•	記錄關鍵指標（如 request latency、DB query 次數、error rate）

目標：

打造 observability-ready 架構。
