// Code generated by MockGen. DO NOT EDIT.
// Source: member_repository.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	entity "module-clean/internal/modules/member/entity"
	pagination "module-clean/internal/shared/common/pagination"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockMemberRepository is a mock of MemberRepository interface.
type MockMemberRepository struct {
	ctrl     *gomock.Controller
	recorder *MockMemberRepositoryMockRecorder
}

// MockMemberRepositoryMockRecorder is the mock recorder for MockMemberRepository.
type MockMemberRepositoryMockRecorder struct {
	mock *MockMemberRepository
}

// NewMockMemberRepository creates a new mock instance.
func NewMockMemberRepository(ctrl *gomock.Controller) *MockMemberRepository {
	mock := &MockMemberRepository{ctrl: ctrl}
	mock.recorder = &MockMemberRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMemberRepository) EXPECT() *MockMemberRepositoryMockRecorder {
	return m.recorder
}

// CountAll mocks base method.
func (m *MockMemberRepository) CountAll(ctx context.Context) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountAll", ctx)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountAll indicates an expected call of CountAll.
func (mr *MockMemberRepositoryMockRecorder) CountAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountAll", reflect.TypeOf((*MockMemberRepository)(nil).CountAll), ctx)
}

// Create mocks base method.
func (m_2 *MockMemberRepository) Create(ctx context.Context, m *entity.Member) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Create", ctx, m)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockMemberRepositoryMockRecorder) Create(ctx, m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockMemberRepository)(nil).Create), ctx, m)
}

// Delete mocks base method.
func (m *MockMemberRepository) Delete(ctx context.Context, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockMemberRepositoryMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockMemberRepository)(nil).Delete), ctx, id)
}

// GetAll mocks base method.
func (m *MockMemberRepository) GetAll(ctx context.Context, pagination pagination.Pagination) ([]*entity.Member, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx, pagination)
	ret0, _ := ret[0].([]*entity.Member)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockMemberRepositoryMockRecorder) GetAll(ctx, pagination interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockMemberRepository)(nil).GetAll), ctx, pagination)
}

// GetByEmail mocks base method.
func (m *MockMemberRepository) GetByEmail(ctx context.Context, email string) (*entity.Member, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByEmail", ctx, email)
	ret0, _ := ret[0].(*entity.Member)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByEmail indicates an expected call of GetByEmail.
func (mr *MockMemberRepositoryMockRecorder) GetByEmail(ctx, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByEmail", reflect.TypeOf((*MockMemberRepository)(nil).GetByEmail), ctx, email)
}

// GetByID mocks base method.
func (m *MockMemberRepository) GetByID(ctx context.Context, id int) (*entity.Member, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*entity.Member)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockMemberRepositoryMockRecorder) GetByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockMemberRepository)(nil).GetByID), ctx, id)
}

// UpdateEmail mocks base method.
func (m *MockMemberRepository) UpdateEmail(ctx context.Context, id int, newEmail string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEmail", ctx, id, newEmail)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateEmail indicates an expected call of UpdateEmail.
func (mr *MockMemberRepositoryMockRecorder) UpdateEmail(ctx, id, newEmail interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEmail", reflect.TypeOf((*MockMemberRepository)(nil).UpdateEmail), ctx, id, newEmail)
}

// UpdatePassword mocks base method.
func (m *MockMemberRepository) UpdatePassword(ctx context.Context, id int, newPassword string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePassword", ctx, id, newPassword)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePassword indicates an expected call of UpdatePassword.
func (mr *MockMemberRepositoryMockRecorder) UpdatePassword(ctx, id, newPassword interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePassword", reflect.TypeOf((*MockMemberRepository)(nil).UpdatePassword), ctx, id, newPassword)
}

// UpdateProfile mocks base method.
func (m_2 *MockMemberRepository) UpdateProfile(ctx context.Context, m *entity.Member) (*entity.Member, error) {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "UpdateProfile", ctx, m)
	ret0, _ := ret[0].(*entity.Member)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProfile indicates an expected call of UpdateProfile.
func (mr *MockMemberRepositoryMockRecorder) UpdateProfile(ctx, m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProfile", reflect.TypeOf((*MockMemberRepository)(nil).UpdateProfile), ctx, m)
}
