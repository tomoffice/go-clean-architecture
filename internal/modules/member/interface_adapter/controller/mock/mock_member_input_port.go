// Code generated by MockGen. DO NOT EDIT.
// Source: member_input_port.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entity "github.com/tomoffice/go-clean-architecture/internal/modules/member/entity"
	inputmodel "github.com/tomoffice/go-clean-architecture/internal/modules/member/usecase/inputmodel"
	pagination "github.com/tomoffice/go-clean-architecture/internal/shared/pagination"
)

// MockMemberInputPort is a mock of MemberInputPort interface.
type MockMemberInputPort struct {
	ctrl     *gomock.Controller
	recorder *MockMemberInputPortMockRecorder
}

// MockMemberInputPortMockRecorder is the mock recorder for MockMemberInputPort.
type MockMemberInputPortMockRecorder struct {
	mock *MockMemberInputPort
}

// NewMockMemberInputPort creates a new mock instance.
func NewMockMemberInputPort(ctrl *gomock.Controller) *MockMemberInputPort {
	mock := &MockMemberInputPort{ctrl: ctrl}
	mock.recorder = &MockMemberInputPortMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMemberInputPort) EXPECT() *MockMemberInputPortMockRecorder {
	return m.recorder
}

// DeleteMember mocks base method.
func (m *MockMemberInputPort) DeleteMember(ctx context.Context, id int) (*entity.Member, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMember", ctx, id)
	ret0, _ := ret[0].(*entity.Member)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteMember indicates an expected call of DeleteMember.
func (mr *MockMemberInputPortMockRecorder) DeleteMember(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMember", reflect.TypeOf((*MockMemberInputPort)(nil).DeleteMember), ctx, id)
}

// GetMemberByEmail mocks base method.
func (m *MockMemberInputPort) GetMemberByEmail(ctx context.Context, email string) (*entity.Member, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMemberByEmail", ctx, email)
	ret0, _ := ret[0].(*entity.Member)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMemberByEmail indicates an expected call of GetMemberByEmail.
func (mr *MockMemberInputPortMockRecorder) GetMemberByEmail(ctx, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMemberByEmail", reflect.TypeOf((*MockMemberInputPort)(nil).GetMemberByEmail), ctx, email)
}

// GetMemberByID mocks base method.
func (m *MockMemberInputPort) GetMemberByID(ctx context.Context, id int) (*entity.Member, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMemberByID", ctx, id)
	ret0, _ := ret[0].(*entity.Member)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMemberByID indicates an expected call of GetMemberByID.
func (mr *MockMemberInputPortMockRecorder) GetMemberByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMemberByID", reflect.TypeOf((*MockMemberInputPort)(nil).GetMemberByID), ctx, id)
}

// ListMembers mocks base method.
func (m *MockMemberInputPort) ListMembers(ctx context.Context, pagination pagination.Pagination) ([]*entity.Member, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMembers", ctx, pagination)
	ret0, _ := ret[0].([]*entity.Member)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListMembers indicates an expected call of ListMembers.
func (mr *MockMemberInputPortMockRecorder) ListMembers(ctx, pagination interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMembers", reflect.TypeOf((*MockMemberInputPort)(nil).ListMembers), ctx, pagination)
}

// RegisterMember mocks base method.
func (m *MockMemberInputPort) RegisterMember(ctx context.Context, member *entity.Member) (*entity.Member, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterMember", ctx, member)
	ret0, _ := ret[0].(*entity.Member)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterMember indicates an expected call of RegisterMember.
func (mr *MockMemberInputPortMockRecorder) RegisterMember(ctx, member interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterMember", reflect.TypeOf((*MockMemberInputPort)(nil).RegisterMember), ctx, member)
}

// UpdateMemberEmail mocks base method.
func (m *MockMemberInputPort) UpdateMemberEmail(ctx context.Context, id int, newEmail, password string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMemberEmail", ctx, id, newEmail, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMemberEmail indicates an expected call of UpdateMemberEmail.
func (mr *MockMemberInputPortMockRecorder) UpdateMemberEmail(ctx, id, newEmail, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMemberEmail", reflect.TypeOf((*MockMemberInputPort)(nil).UpdateMemberEmail), ctx, id, newEmail, password)
}

// UpdateMemberPassword mocks base method.
func (m *MockMemberInputPort) UpdateMemberPassword(ctx context.Context, id int, oldPassword, newPassword string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMemberPassword", ctx, id, oldPassword, newPassword)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMemberPassword indicates an expected call of UpdateMemberPassword.
func (mr *MockMemberInputPortMockRecorder) UpdateMemberPassword(ctx, id, oldPassword, newPassword interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMemberPassword", reflect.TypeOf((*MockMemberInputPort)(nil).UpdateMemberPassword), ctx, id, oldPassword, newPassword)
}

// UpdateMemberProfile mocks base method.
func (m *MockMemberInputPort) UpdateMemberProfile(ctx context.Context, patch *inputmodel.PatchUpdateMemberProfileInputModel) (*entity.Member, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMemberProfile", ctx, patch)
	ret0, _ := ret[0].(*entity.Member)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMemberProfile indicates an expected call of UpdateMemberProfile.
func (mr *MockMemberInputPortMockRecorder) UpdateMemberProfile(ctx, patch interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMemberProfile", reflect.TypeOf((*MockMemberInputPort)(nil).UpdateMemberProfile), ctx, patch)
}
