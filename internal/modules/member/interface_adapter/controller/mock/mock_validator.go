// Code generated by MockGen. DO NOT EDIT.
// Source: validator.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	dto "github.com/tomoffice/go-clean-architecture/internal/modules/member/interface_adapter/dto"
)

// MockValidator is a mock of Validator interface.
type MockValidator struct {
	ctrl     *gomock.Controller
	recorder *MockValidatorMockRecorder
}

// MockValidatorMockRecorder is the mock recorder for MockValidator.
type MockValidatorMockRecorder struct {
	mock *MockValidator
}

// NewMockValidator creates a new mock instance.
func NewMockValidator(ctrl *gomock.Controller) *MockValidator {
	mock := &MockValidator{ctrl: ctrl}
	mock.recorder = &MockValidatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockValidator) EXPECT() *MockValidatorMockRecorder {
	return m.recorder
}

// ValidateDeleteMember mocks base method.
func (m *MockValidator) ValidateDeleteMember(arg0 dto.DeleteMemberRequestDTO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateDeleteMember", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateDeleteMember indicates an expected call of ValidateDeleteMember.
func (mr *MockValidatorMockRecorder) ValidateDeleteMember(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateDeleteMember", reflect.TypeOf((*MockValidator)(nil).ValidateDeleteMember), arg0)
}

// ValidateGetMemberByEmail mocks base method.
func (m *MockValidator) ValidateGetMemberByEmail(arg0 dto.GetMemberByEmailRequestDTO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateGetMemberByEmail", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateGetMemberByEmail indicates an expected call of ValidateGetMemberByEmail.
func (mr *MockValidatorMockRecorder) ValidateGetMemberByEmail(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateGetMemberByEmail", reflect.TypeOf((*MockValidator)(nil).ValidateGetMemberByEmail), arg0)
}

// ValidateGetMemberByID mocks base method.
func (m *MockValidator) ValidateGetMemberByID(arg0 dto.GetMemberByIDRequestDTO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateGetMemberByID", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateGetMemberByID indicates an expected call of ValidateGetMemberByID.
func (mr *MockValidatorMockRecorder) ValidateGetMemberByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateGetMemberByID", reflect.TypeOf((*MockValidator)(nil).ValidateGetMemberByID), arg0)
}

// ValidateListMember mocks base method.
func (m *MockValidator) ValidateListMember(arg0 dto.ListMemberRequestDTO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateListMember", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateListMember indicates an expected call of ValidateListMember.
func (mr *MockValidatorMockRecorder) ValidateListMember(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateListMember", reflect.TypeOf((*MockValidator)(nil).ValidateListMember), arg0)
}

// ValidateRegisterMember mocks base method.
func (m *MockValidator) ValidateRegisterMember(arg0 dto.RegisterMemberRequestDTO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateRegisterMember", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateRegisterMember indicates an expected call of ValidateRegisterMember.
func (mr *MockValidatorMockRecorder) ValidateRegisterMember(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateRegisterMember", reflect.TypeOf((*MockValidator)(nil).ValidateRegisterMember), arg0)
}

// ValidateUpdateEmail mocks base method.
func (m *MockValidator) ValidateUpdateEmail(arg0 dto.UpdateMemberEmailRequestDTO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateUpdateEmail", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateUpdateEmail indicates an expected call of ValidateUpdateEmail.
func (mr *MockValidatorMockRecorder) ValidateUpdateEmail(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateUpdateEmail", reflect.TypeOf((*MockValidator)(nil).ValidateUpdateEmail), arg0)
}

// ValidateUpdatePassword mocks base method.
func (m *MockValidator) ValidateUpdatePassword(arg0 dto.UpdateMemberPasswordRequestDTO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateUpdatePassword", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateUpdatePassword indicates an expected call of ValidateUpdatePassword.
func (mr *MockValidatorMockRecorder) ValidateUpdatePassword(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateUpdatePassword", reflect.TypeOf((*MockValidator)(nil).ValidateUpdatePassword), arg0)
}

// ValidateUpdateProfile mocks base method.
func (m *MockValidator) ValidateUpdateProfile(arg0 dto.UpdateMemberProfileRequestDTO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateUpdateProfile", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateUpdateProfile indicates an expected call of ValidateUpdateProfile.
func (mr *MockValidatorMockRecorder) ValidateUpdateProfile(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateUpdateProfile", reflect.TypeOf((*MockValidator)(nil).ValidateUpdateProfile), arg0)
}
