// Code generated by MockGen. DO NOT EDIT.
// Source: member_presenter.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entity "github.com/tomoffice/go-clean-architecture/internal/modules/member/entity"
	outputmodel "github.com/tomoffice/go-clean-architecture/internal/modules/member/interface_adapter/outputmodel"
)

// MockMemberPresenter is a mock of MemberPresenter interface.
type MockMemberPresenter struct {
	ctrl     *gomock.Controller
	recorder *MockMemberPresenterMockRecorder
}

// MockMemberPresenterMockRecorder is the mock recorder for MockMemberPresenter.
type MockMemberPresenterMockRecorder struct {
	mock *MockMemberPresenter
}

// NewMockMemberPresenter creates a new mock instance.
func NewMockMemberPresenter(ctrl *gomock.Controller) *MockMemberPresenter {
	mock := &MockMemberPresenter{ctrl: ctrl}
	mock.recorder = &MockMemberPresenterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMemberPresenter) EXPECT() *MockMemberPresenterMockRecorder {
	return m.recorder
}

// PresentBindingError mocks base method.
func (m *MockMemberPresenter) PresentBindingError(errCode int, message string) outputmodel.ErrorResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PresentBindingError", errCode, message)
	ret0, _ := ret[0].(outputmodel.ErrorResponse)
	return ret0
}

// PresentBindingError indicates an expected call of PresentBindingError.
func (mr *MockMemberPresenterMockRecorder) PresentBindingError(errCode, message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PresentBindingError", reflect.TypeOf((*MockMemberPresenter)(nil).PresentBindingError), errCode, message)
}

// PresentDeleteMember mocks base method.
func (m *MockMemberPresenter) PresentDeleteMember(member *entity.Member) outputmodel.DeleteMemberResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PresentDeleteMember", member)
	ret0, _ := ret[0].(outputmodel.DeleteMemberResponse)
	return ret0
}

// PresentDeleteMember indicates an expected call of PresentDeleteMember.
func (mr *MockMemberPresenterMockRecorder) PresentDeleteMember(member interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PresentDeleteMember", reflect.TypeOf((*MockMemberPresenter)(nil).PresentDeleteMember), member)
}

// PresentGetMemberByEmail mocks base method.
func (m *MockMemberPresenter) PresentGetMemberByEmail(member *entity.Member) outputmodel.GetMemberByEmailResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PresentGetMemberByEmail", member)
	ret0, _ := ret[0].(outputmodel.GetMemberByEmailResponse)
	return ret0
}

// PresentGetMemberByEmail indicates an expected call of PresentGetMemberByEmail.
func (mr *MockMemberPresenterMockRecorder) PresentGetMemberByEmail(member interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PresentGetMemberByEmail", reflect.TypeOf((*MockMemberPresenter)(nil).PresentGetMemberByEmail), member)
}

// PresentGetMemberByID mocks base method.
func (m *MockMemberPresenter) PresentGetMemberByID(member *entity.Member) outputmodel.GetMemberByIDResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PresentGetMemberByID", member)
	ret0, _ := ret[0].(outputmodel.GetMemberByIDResponse)
	return ret0
}

// PresentGetMemberByID indicates an expected call of PresentGetMemberByID.
func (mr *MockMemberPresenterMockRecorder) PresentGetMemberByID(member interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PresentGetMemberByID", reflect.TypeOf((*MockMemberPresenter)(nil).PresentGetMemberByID), member)
}

// PresentListMembers mocks base method.
func (m *MockMemberPresenter) PresentListMembers(members []*entity.Member, total int) outputmodel.ListMemberResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PresentListMembers", members, total)
	ret0, _ := ret[0].(outputmodel.ListMemberResponse)
	return ret0
}

// PresentListMembers indicates an expected call of PresentListMembers.
func (mr *MockMemberPresenterMockRecorder) PresentListMembers(members, total interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PresentListMembers", reflect.TypeOf((*MockMemberPresenter)(nil).PresentListMembers), members, total)
}

// PresentRegisterMember mocks base method.
func (m *MockMemberPresenter) PresentRegisterMember(member *entity.Member) outputmodel.RegisterMemberResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PresentRegisterMember", member)
	ret0, _ := ret[0].(outputmodel.RegisterMemberResponse)
	return ret0
}

// PresentRegisterMember indicates an expected call of PresentRegisterMember.
func (mr *MockMemberPresenterMockRecorder) PresentRegisterMember(member interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PresentRegisterMember", reflect.TypeOf((*MockMemberPresenter)(nil).PresentRegisterMember), member)
}

// PresentUpdateMemberEmail mocks base method.
func (m *MockMemberPresenter) PresentUpdateMemberEmail() outputmodel.UpdateMemberEmailResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PresentUpdateMemberEmail")
	ret0, _ := ret[0].(outputmodel.UpdateMemberEmailResponse)
	return ret0
}

// PresentUpdateMemberEmail indicates an expected call of PresentUpdateMemberEmail.
func (mr *MockMemberPresenterMockRecorder) PresentUpdateMemberEmail() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PresentUpdateMemberEmail", reflect.TypeOf((*MockMemberPresenter)(nil).PresentUpdateMemberEmail))
}

// PresentUpdateMemberPassword mocks base method.
func (m *MockMemberPresenter) PresentUpdateMemberPassword() outputmodel.UpdateMemberPasswordResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PresentUpdateMemberPassword")
	ret0, _ := ret[0].(outputmodel.UpdateMemberPasswordResponse)
	return ret0
}

// PresentUpdateMemberPassword indicates an expected call of PresentUpdateMemberPassword.
func (mr *MockMemberPresenterMockRecorder) PresentUpdateMemberPassword() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PresentUpdateMemberPassword", reflect.TypeOf((*MockMemberPresenter)(nil).PresentUpdateMemberPassword))
}

// PresentUpdateMemberProfile mocks base method.
func (m *MockMemberPresenter) PresentUpdateMemberProfile(member *entity.Member) outputmodel.UpdateMemberProfileResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PresentUpdateMemberProfile", member)
	ret0, _ := ret[0].(outputmodel.UpdateMemberProfileResponse)
	return ret0
}

// PresentUpdateMemberProfile indicates an expected call of PresentUpdateMemberProfile.
func (mr *MockMemberPresenterMockRecorder) PresentUpdateMemberProfile(member interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PresentUpdateMemberProfile", reflect.TypeOf((*MockMemberPresenter)(nil).PresentUpdateMemberProfile), member)
}

// PresentUseCaseError mocks base method.
func (m *MockMemberPresenter) PresentUseCaseError(err error) (int, outputmodel.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PresentUseCaseError", err)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(outputmodel.ErrorResponse)
	return ret0, ret1
}

// PresentUseCaseError indicates an expected call of PresentUseCaseError.
func (mr *MockMemberPresenterMockRecorder) PresentUseCaseError(err interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PresentUseCaseError", reflect.TypeOf((*MockMemberPresenter)(nil).PresentUseCaseError), err)
}

// PresentValidationError mocks base method.
func (m *MockMemberPresenter) PresentValidationError(err error) (int, outputmodel.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PresentValidationError", err)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(outputmodel.ErrorResponse)
	return ret0, ret1
}

// PresentValidationError indicates an expected call of PresentValidationError.
func (mr *MockMemberPresenterMockRecorder) PresentValidationError(err interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PresentValidationError", reflect.TypeOf((*MockMemberPresenter)(nil).PresentValidationError), err)
}
