// Code generated by MockGen. DO NOT EDIT.
// Source: context.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockContext is a mock of Context interface.
type MockContext struct {
	ctrl     *gomock.Controller
	recorder *MockContextMockRecorder
}

// MockContextMockRecorder is the mock recorder for MockContext.
type MockContextMockRecorder struct {
	mock *MockContext
}

// NewMockContext creates a new mock instance.
func NewMockContext(ctrl *gomock.Controller) *MockContext {
	mock := &MockContext{ctrl: ctrl}
	mock.recorder = &MockContextMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContext) EXPECT() *MockContextMockRecorder {
	return m.recorder
}

// BindJSON mocks base method.
func (m *MockContext) BindJSON(dest any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BindJSON", dest)
	ret0, _ := ret[0].(error)
	return ret0
}

// BindJSON indicates an expected call of BindJSON.
func (mr *MockContextMockRecorder) BindJSON(dest interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BindJSON", reflect.TypeOf((*MockContext)(nil).BindJSON), dest)
}

// BindQuery mocks base method.
func (m *MockContext) BindQuery(dest any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BindQuery", dest)
	ret0, _ := ret[0].(error)
	return ret0
}

// BindQuery indicates an expected call of BindQuery.
func (mr *MockContextMockRecorder) BindQuery(dest interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BindQuery", reflect.TypeOf((*MockContext)(nil).BindQuery), dest)
}

// BindURI mocks base method.
func (m *MockContext) BindURI(dest any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BindURI", dest)
	ret0, _ := ret[0].(error)
	return ret0
}

// BindURI indicates an expected call of BindURI.
func (mr *MockContextMockRecorder) BindURI(dest interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BindURI", reflect.TypeOf((*MockContext)(nil).BindURI), dest)
}

// GetHeader mocks base method.
func (m *MockContext) GetHeader(key string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHeader", key)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetHeader indicates an expected call of GetHeader.
func (mr *MockContextMockRecorder) GetHeader(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHeader", reflect.TypeOf((*MockContext)(nil).GetHeader), key)
}

// Header mocks base method.
func (m *MockContext) Header(key, val string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Header", key, val)
}

// Header indicates an expected call of Header.
func (mr *MockContextMockRecorder) Header(key, val interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockContext)(nil).Header), key, val)
}

// JSON mocks base method.
func (m *MockContext) JSON(code int, body any) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "JSON", code, body)
}

// JSON indicates an expected call of JSON.
func (mr *MockContextMockRecorder) JSON(code, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JSON", reflect.TypeOf((*MockContext)(nil).JSON), code, body)
}

// Param mocks base method.
func (m *MockContext) Param(key string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Param", key)
	ret0, _ := ret[0].(string)
	return ret0
}

// Param indicates an expected call of Param.
func (mr *MockContextMockRecorder) Param(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Param", reflect.TypeOf((*MockContext)(nil).Param), key)
}

// RequestContext mocks base method.
func (m *MockContext) RequestContext() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequestCtx")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// RequestContext indicates an expected call of RequestContext.
func (mr *MockContextMockRecorder) RequestContext() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestCtx", reflect.TypeOf((*MockContext)(nil).RequestContext))
}

// Status mocks base method.
func (m *MockContext) Status(code int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Status", code)
}

// Status indicates an expected call of Status.
func (mr *MockContextMockRecorder) Status(code interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Status", reflect.TypeOf((*MockContext)(nil).Status), code)
}
